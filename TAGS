
libipvs/ip_vs.h,16620
#define _IP_VS_H_IP_VS_H7,104
#define IP_VS_VERSION_CODE	IP_VS_VERSION_CODE20,375
#define NVERSION(NVERSION21,411
#define IP_VS_SVC_F_PERSISTENT	IP_VS_SVC_F_PERSISTENT29,552
#define IP_VS_SVC_F_HASHED	IP_VS_SVC_F_HASHED30,613
#define IP_VS_STATE_NONE	IP_VS_STATE_NONE35,707
#define IP_VS_STATE_MASTER	IP_VS_STATE_MASTER36,764
#define IP_VS_STATE_BACKUP	IP_VS_STATE_BACKUP37,823
#define IP_VS_BASE_CTL	IP_VS_BASE_CTL42,918
#define IP_VS_SO_SET_NONE	IP_VS_SO_SET_NONE44,968
#define IP_VS_SO_SET_INSERT	IP_VS_SO_SET_INSERT45,1026
#define IP_VS_SO_SET_ADD	IP_VS_SO_SET_ADD46,1073
#define IP_VS_SO_SET_EDIT	IP_VS_SO_SET_EDIT47,1117
#define IP_VS_SO_SET_DEL	IP_VS_SO_SET_DEL48,1162
#define IP_VS_SO_SET_FLUSH	IP_VS_SO_SET_FLUSH49,1206
#define IP_VS_SO_SET_LIST	IP_VS_SO_SET_LIST50,1252
#define IP_VS_SO_SET_ADDDEST	IP_VS_SO_SET_ADDDEST51,1297
#define IP_VS_SO_SET_DELDEST	IP_VS_SO_SET_DELDEST52,1345
#define IP_VS_SO_SET_EDITDEST	IP_VS_SO_SET_EDITDEST53,1393
#define IP_VS_SO_SET_TIMEOUT	IP_VS_SO_SET_TIMEOUT54,1442
#define IP_VS_SO_SET_STARTDAEMON IP_VS_SO_SET_STARTDAEMON55,1491
#define IP_VS_SO_SET_STOPDAEMON IP_VS_SO_SET_STOPDAEMON56,1544
#define IP_VS_SO_SET_RESTORE IP_VS_SO_SET_RESTORE57,1596
#define IP_VS_SO_SET_SAVE IP_VS_SO_SET_SAVE58,1648
#define IP_VS_SO_SET_ZERO	IP_VS_SO_SET_ZERO59,1700
#define IP_VS_SO_SET_MAX	IP_VS_SO_SET_MAX60,1746
#define IP_VS_SO_GET_VERSION	IP_VS_SO_GET_VERSION62,1790
#define IP_VS_SO_GET_INFO	IP_VS_SO_GET_INFO63,1834
#define IP_VS_SO_GET_SERVICES	IP_VS_SO_GET_SERVICES64,1879
#define IP_VS_SO_GET_SERVICE	IP_VS_SO_GET_SERVICE65,1928
#define IP_VS_SO_GET_DESTS	IP_VS_SO_GET_DESTS66,1976
#define IP_VS_SO_GET_DEST	IP_VS_SO_GET_DEST67,2022
#define IP_VS_SO_GET_TIMEOUT	IP_VS_SO_GET_TIMEOUT68,2086
#define IP_VS_SO_GET_DAEMON	IP_VS_SO_GET_DAEMON69,2134
#define IP_VS_SO_GET_MAX	IP_VS_SO_GET_MAX70,2181
#define IP_VS_CONN_F_FWD_MASK	IP_VS_CONN_F_FWD_MASK76,2265
#define IP_VS_CONN_F_MASQ	IP_VS_CONN_F_MASQ77,2334
#define IP_VS_CONN_F_LOCALNODE	IP_VS_CONN_F_LOCALNODE78,2391
#define IP_VS_CONN_F_TUNNEL	IP_VS_CONN_F_TUNNEL79,2447
#define IP_VS_CONN_F_DROUTE	IP_VS_CONN_F_DROUTE80,2499
#define IP_VS_CONN_F_BYPASS	IP_VS_CONN_F_BYPASS81,2556
#define IP_VS_CONN_F_SYNC	IP_VS_CONN_F_SYNC82,2611
#define IP_VS_CONN_F_HASHED	IP_VS_CONN_F_HASHED83,2673
#define IP_VS_CONN_F_NOOUTPUT	IP_VS_CONN_F_NOOUTPUT84,2728
#define IP_VS_CONN_F_INACTIVE	IP_VS_CONN_F_INACTIVE85,2790
#define IP_VS_CONN_F_OUT_SEQ	IP_VS_CONN_F_OUT_SEQ86,2850
#define IP_VS_CONN_F_IN_SEQ	IP_VS_CONN_F_IN_SEQ87,2919
#define IP_VS_CONN_F_SEQ_MASK	IP_VS_CONN_F_SEQ_MASK88,2986
#define IP_VS_CONN_F_NO_CPORT	IP_VS_CONN_F_NO_CPORT89,3051
#define IP_VS_CONN_F_TEMPLATE	IP_VS_CONN_F_TEMPLATE90,3118
#define NFC_IPVS_PROPERTY	NFC_IPVS_PROPERTY93,3250
#define IP_VS_SCHEDNAME_MAXLEN	IP_VS_SCHEDNAME_MAXLEN95,3285
#define IP_VS_IFNAME_MAXLEN	IP_VS_IFNAME_MAXLEN96,3319
union nf_inet_addr {nf_inet_addr98,3351
        __u32           all[4];all99,3372
        __be32          ip;ip100,3404
        __be32          ip6[4];ip6101,3432
        struct in_addr  in;in102,3464
        struct in6_addr in6;in6103,3492
struct ip_vs_service_kern {ip_vs_service_kern110,3642
	u_int16_t		protocol;protocol112,3703
	__be32			addr;	/* virtual ip address */addr113,3725
	__be16			port;port114,3766
	u_int32_t		fwmark;		/* firwall mark of service */fwmark115,3782
	char			sched_name[IP_VS_SCHEDNAME_MAXLEN];sched_name118,3865
	unsigned		flags;		/* virtual service flags */flags119,3909
	unsigned		timeout;	/* persistent timeout in sec */timeout120,3956
	__be32			netmask;	/* persistent netmask */netmask121,4008
struct ip_vs_service_user {ip_vs_service_user124,4056
	u_int16_t		protocol;protocol126,4117
	__be32			__addr_v4;	/* virtual ip address - internal use only */__addr_v4127,4139
	__be16			port;port128,4205
	u_int32_t		fwmark;		/* firwall mark of service */fwmark129,4221
	char			sched_name[IP_VS_SCHEDNAME_MAXLEN];sched_name132,4304
	unsigned		flags;		/* virtual service flags */flags133,4348
	unsigned		timeout;	/* persistent timeout in sec */timeout134,4395
	__be32			netmask;	/* persistent netmask */netmask135,4447
	u_int16_t		af;af136,4491
	union nf_inet_addr	addr;addr137,4507
struct ip_vs_dest_kern {ip_vs_dest_kern140,4537
	__be32			addr;addr142,4596
	__be16			port;port143,4612
	unsigned		conn_flags;	/* connection flags */conn_flags146,4656
	int			weight;		/* destination weight */weight147,4702
	u_int32_t		u_threshold;	/* upper threshold */u_threshold150,4785
	u_int32_t		l_threshold;	/* lower threshold */l_threshold151,4832
struct ip_vs_dest_user {ip_vs_dest_user154,4883
	__be32			__addr_v4; /* internal use only */__addr_v4156,4942
	__be16			port;port157,4987
	unsigned		conn_flags;	/* connection flags */conn_flags160,5031
	int			weight;		/* destination weight */weight161,5077
	u_int32_t		u_threshold;	/* upper threshold */u_threshold164,5160
	u_int32_t		l_threshold;	/* lower threshold */l_threshold165,5207
	u_int16_t		af;af166,5254
	union nf_inet_addr	addr;addr167,5270
struct ip_vs_stats_userip_vs_stats_user173,5350
	__u32                   conns;          /* connections scheduled */conns175,5376
	__u32                   inpkts;         /* incoming packets */inpkts176,5445
	__u32                   outpkts;        /* outgoing packets */outpkts177,5509
	__u64                   inbytes;        /* incoming bytes */inbytes178,5573
	__u64                   outbytes;       /* outgoing bytes */outbytes179,5635
	__u32			cps;		/* current connection rate */cps181,5698
	__u32			inpps;		/* current in packet rate */inpps182,5743
	__u32			outpps;		/* current out packet rate */outpps183,5789
	__u32			inbps;		/* current in byte rate */inbps184,5837
	__u32			outbps;		/* current out byte rate */outbps185,5881
struct ip_vs_getinfo {ip_vs_getinfo190,5972
	unsigned int		version;version192,6017
	unsigned int		size;size195,6079
	unsigned int		num_services;num_services198,6135
struct ip_vs_service_entry_kern {ip_vs_service_entry_kern203,6212
	u_int16_t		protocol;protocol205,6288
	__be32			addr;	/* virtual address */addr206,6310
	__be16			port;port207,6348
	u_int32_t		fwmark;		/* firwall mark of service */fwmark208,6364
	char			sched_name[IP_VS_SCHEDNAME_MAXLEN];sched_name211,6439
	unsigned		flags;          /* virtual service flags */flags212,6483
	unsigned		timeout;	/* persistent timeout */timeout213,6538
	__be32			netmask;	/* persistent netmask */netmask214,6583
	unsigned int		num_dests;num_dests217,6658
	struct ip_vs_stats_user stats;stats220,6703
struct ip_vs_service_entry {ip_vs_service_entry223,6739
	u_int16_t		protocol;protocol225,6810
	__be32			__addr_v4;	/* virtual address - internal use only*/__addr_v4226,6832
	__be16			port;port227,6894
	u_int32_t		fwmark;		/* firwall mark of service */fwmark228,6910
	char			sched_name[IP_VS_SCHEDNAME_MAXLEN];sched_name231,6985
	unsigned		flags;          /* virtual service flags */flags232,7029
	unsigned		timeout;	/* persistent timeout */timeout233,7084
	__be32			netmask;	/* persistent netmask */netmask234,7129
	unsigned int		num_dests;num_dests237,7204
	struct ip_vs_stats_user stats;stats240,7249
	u_int16_t		af;af242,7282
	union nf_inet_addr	addr;addr243,7298
struct ip_vs_dest_entry_kern {ip_vs_dest_entry_kern247,7329
	__be32			addr;	/* destination address */addr248,7360
	__be16			port;port249,7402
	unsigned		conn_flags;	/* connection flags */conn_flags250,7418
	int			weight;		/* destination weight */weight251,7464
	u_int32_t		u_threshold;	/* upper threshold */u_threshold253,7506
	u_int32_t		l_threshold;	/* lower threshold */l_threshold254,7553
	u_int32_t		activeconns;	/* active connections */activeconns256,7601
	u_int32_t		inactconns;	/* inactive connections */inactconns257,7651
	u_int32_t		persistconns;	/* persistent connections */persistconns258,7702
	struct ip_vs_stats_user stats;stats261,7776
struct ip_vs_dest_entry {ip_vs_dest_entry264,7812
	__be32			__addr_v4;	/* destination address - internal use only */__addr_v4265,7838
	__be16			port;port266,7905
	unsigned		conn_flags;	/* connection flags */conn_flags267,7921
	int			weight;		/* destination weight */weight268,7967
	u_int32_t		u_threshold;	/* upper threshold */u_threshold270,8009
	u_int32_t		l_threshold;	/* lower threshold */l_threshold271,8056
	u_int32_t		activeconns;	/* active connections */activeconns273,8104
	u_int32_t		inactconns;	/* inactive connections */inactconns274,8154
	u_int32_t		persistconns;	/* persistent connections */persistconns275,8205
	struct ip_vs_stats_user stats;stats278,8279
	u_int16_t		af;af279,8311
	union nf_inet_addr	addr;addr280,8327
struct ip_vs_get_dests_kern {ip_vs_get_dests_kern284,8398
	u_int16_t		protocol;protocol286,8470
	__be32			addr;	/* virtual address - internal use only */addr287,8492
	__be16			port;port288,8550
	u_int32_t		fwmark;		/* firwall mark of service */fwmark289,8566
	unsigned int		num_dests;num_dests292,8648
	struct ip_vs_dest_entry_kern	entrytable[0];entrytable295,8699
struct ip_vs_get_dests {ip_vs_get_dests298,8748
	u_int16_t		protocol;protocol300,8815
	__be32			__addr_v4;	/* virtual address - internal use only */__addr_v4301,8837
	__be16			port;port302,8900
	u_int32_t		fwmark;		/* firwall mark of service */fwmark303,8916
	unsigned int		num_dests;num_dests306,8998
	u_int16_t		af;af307,9024
	union nf_inet_addr	addr;addr308,9040
	struct ip_vs_dest_entry	entrytable[0];entrytable311,9091
struct ip_vs_get_services {ip_vs_get_services315,9179
	unsigned int		num_services;num_services317,9241
	struct ip_vs_service_entry entrytable[0];entrytable320,9292
struct ip_vs_get_services_kern {ip_vs_get_services_kern323,9339
	unsigned int		num_services;num_services325,9406
	struct ip_vs_service_entry_kern entrytable[0];entrytable328,9457
struct ip_vs_timeout_user {ip_vs_timeout_user332,9552
	int			tcp_timeout;tcp_timeout333,9580
	int			tcp_fin_timeout;tcp_fin_timeout334,9600
	int			udp_timeout;udp_timeout335,9624
struct ip_vs_daemon_user {ip_vs_daemon_user340,9691
	int			state;state342,9759
	char			mcast_ifn[IP_VS_IFNAME_MAXLEN];mcast_ifn345,9806
	int			syncid;syncid348,9874
#define IPVS_GENL_NAME	IPVS_GENL_NAME360,9989
#define IPVS_GENL_VERSION	IPVS_GENL_VERSION361,10020
struct ip_vs_flags {ip_vs_flags363,10051
	__be32 flags;flags364,10072
	__be32 mask;mask365,10087
	IPVS_CMD_UNSPEC = 0,IPVS_CMD_UNSPEC370,10153
	IPVS_CMD_NEW_SERVICE,		/* add service */IPVS_CMD_NEW_SERVICE372,10176
	IPVS_CMD_SET_SERVICE,		/* modify service */IPVS_CMD_SET_SERVICE373,10218
	IPVS_CMD_DEL_SERVICE,		/* delete service */IPVS_CMD_DEL_SERVICE374,10263
	IPVS_CMD_GET_SERVICE,		/* get info about specific service */IPVS_CMD_GET_SERVICE375,10308
	IPVS_CMD_NEW_DEST,		/* add destination */IPVS_CMD_NEW_DEST377,10371
	IPVS_CMD_SET_DEST,		/* modify destination */IPVS_CMD_SET_DEST378,10414
	IPVS_CMD_DEL_DEST,		/* delete destination */IPVS_CMD_DEL_DEST379,10460
	IPVS_CMD_GET_DEST,		/* get list of all service dests */IPVS_CMD_GET_DEST380,10506
	IPVS_CMD_NEW_DAEMON,		/* start sync daemon */IPVS_CMD_NEW_DAEMON382,10564
	IPVS_CMD_DEL_DAEMON,		/* stop sync daemon */IPVS_CMD_DEL_DAEMON383,10611
	IPVS_CMD_GET_DAEMON,		/* get sync daemon status */IPVS_CMD_GET_DAEMON384,10657
	IPVS_CMD_SET_TIMEOUT,		/* set TCP and UDP timeouts */IPVS_CMD_SET_TIMEOUT386,10710
	IPVS_CMD_GET_TIMEOUT,		/* get TCP and UDP timeouts */IPVS_CMD_GET_TIMEOUT387,10765
	IPVS_CMD_SET_INFO,		/* only used in GET_INFO reply */IPVS_CMD_SET_INFO389,10821
	IPVS_CMD_GET_INFO,		/* get general IPVS info */IPVS_CMD_GET_INFO390,10876
	IPVS_CMD_ZERO,			/* zero all counters and stats */IPVS_CMD_ZERO392,10926
	IPVS_CMD_FLUSH,			/* flush services and dests */IPVS_CMD_FLUSH393,10978
	__IPVS_CMD_MAX,__IPVS_CMD_MAX395,11029
#define IPVS_CMD_MAX IPVS_CMD_MAX398,11050
	IPVS_CMD_ATTR_UNSPEC = 0,IPVS_CMD_ATTR_UNSPEC402,11153
	IPVS_CMD_ATTR_SERVICE,		/* nested service attribute */IPVS_CMD_ATTR_SERVICE403,11180
	IPVS_CMD_ATTR_DEST,		/* nested destination attribute */IPVS_CMD_ATTR_DEST404,11236
	IPVS_CMD_ATTR_DAEMON,		/* nested sync daemon attribute */IPVS_CMD_ATTR_DAEMON405,11293
	IPVS_CMD_ATTR_TIMEOUT_TCP,	/* TCP connection timeout */IPVS_CMD_ATTR_TIMEOUT_TCP406,11352
	IPVS_CMD_ATTR_TIMEOUT_TCP_FIN,	/* TCP FIN wait timeout */IPVS_CMD_ATTR_TIMEOUT_TCP_FIN407,11409
	IPVS_CMD_ATTR_TIMEOUT_UDP,	/* UDP timeout */IPVS_CMD_ATTR_TIMEOUT_UDP408,11468
	__IPVS_CMD_ATTR_MAX,__IPVS_CMD_ATTR_MAX409,11514
#define IPVS_CMD_ATTR_MAX IPVS_CMD_ATTR_MAX412,11540
	IPVS_SVC_ATTR_UNSPEC = 0,IPVS_SVC_ATTR_UNSPEC420,11705
	IPVS_SVC_ATTR_AF,		/* address family */IPVS_SVC_ATTR_AF421,11732
	IPVS_SVC_ATTR_PROTOCOL,		/* virtual service protocol */IPVS_SVC_ATTR_PROTOCOL422,11773
	IPVS_SVC_ATTR_ADDR,		/* virtual service address */IPVS_SVC_ATTR_ADDR423,11830
	IPVS_SVC_ATTR_PORT,		/* virtual service port */IPVS_SVC_ATTR_PORT424,11882
	IPVS_SVC_ATTR_FWMARK,		/* firewall mark of service */IPVS_SVC_ATTR_FWMARK425,11931
	IPVS_SVC_ATTR_SCHED_NAME,	/* name of scheduler */IPVS_SVC_ATTR_SCHED_NAME427,11987
	IPVS_SVC_ATTR_FLAGS,		/* virtual service flags */IPVS_SVC_ATTR_FLAGS428,12038
	IPVS_SVC_ATTR_TIMEOUT,		/* persistent timeout */IPVS_SVC_ATTR_TIMEOUT429,12089
	IPVS_SVC_ATTR_NETMASK,		/* persistent netmask */IPVS_SVC_ATTR_NETMASK430,12139
	IPVS_SVC_ATTR_STATS,		/* nested attribute for service stats */IPVS_SVC_ATTR_STATS432,12190
	__IPVS_SVC_ATTR_MAX,__IPVS_SVC_ATTR_MAX433,12254
#define IPVS_SVC_ATTR_MAX IPVS_SVC_ATTR_MAX436,12280
	IPVS_DEST_ATTR_UNSPEC = 0,IPVS_DEST_ATTR_UNSPEC444,12460
	IPVS_DEST_ATTR_ADDR,		/* real server address */IPVS_DEST_ATTR_ADDR445,12488
	IPVS_DEST_ATTR_PORT,		/* real server port */IPVS_DEST_ATTR_PORT446,12537
	IPVS_DEST_ATTR_FWD_METHOD,	/* forwarding method */IPVS_DEST_ATTR_FWD_METHOD448,12584
	IPVS_DEST_ATTR_WEIGHT,		/* destination weight */IPVS_DEST_ATTR_WEIGHT449,12636
	IPVS_DEST_ATTR_U_THRESH,	/* upper threshold */IPVS_DEST_ATTR_U_THRESH451,12687
	IPVS_DEST_ATTR_L_THRESH,	/* lower threshold */IPVS_DEST_ATTR_L_THRESH452,12735
	IPVS_DEST_ATTR_ACTIVE_CONNS,	/* active connections */IPVS_DEST_ATTR_ACTIVE_CONNS454,12784
	IPVS_DEST_ATTR_INACT_CONNS,	/* inactive connections */IPVS_DEST_ATTR_INACT_CONNS455,12839
	IPVS_DEST_ATTR_PERSIST_CONNS,	/* persistent connections */IPVS_DEST_ATTR_PERSIST_CONNS456,12895
	IPVS_DEST_ATTR_STATS,		/* nested attribute for dest stats */IPVS_DEST_ATTR_STATS458,12956
	__IPVS_DEST_ATTR_MAX,__IPVS_DEST_ATTR_MAX459,13018
#define IPVS_DEST_ATTR_MAX IPVS_DEST_ATTR_MAX462,13045
	IPVS_DAEMON_ATTR_UNSPEC = 0,IPVS_DAEMON_ATTR_UNSPEC470,13209
	IPVS_DAEMON_ATTR_STATE,		/* sync daemon state (master/backup) */IPVS_DAEMON_ATTR_STATE471,13239
	IPVS_DAEMON_ATTR_MCAST_IFN,	/* multicast interface name */IPVS_DAEMON_ATTR_MCAST_IFN472,13305
	IPVS_DAEMON_ATTR_SYNC_ID,	/* SyncID we belong to */IPVS_DAEMON_ATTR_SYNC_ID473,13365
	__IPVS_DAEMON_ATTR_MAX,__IPVS_DAEMON_ATTR_MAX474,13418
#define IPVS_DAEMON_ATTR_MAX IPVS_DAEMON_ATTR_MAX477,13447
	IPVS_STATS_ATTR_UNSPEC = 0,IPVS_STATS_ATTR_UNSPEC485,13672
	IPVS_STATS_ATTR_CONNS,		/* connections scheduled */IPVS_STATS_ATTR_CONNS486,13701
	IPVS_STATS_ATTR_INPKTS,		/* incoming packets */IPVS_STATS_ATTR_INPKTS487,13754
	IPVS_STATS_ATTR_OUTPKTS,	/* outgoing packets */IPVS_STATS_ATTR_OUTPKTS488,13803
	IPVS_STATS_ATTR_INBYTES,	/* incoming bytes */IPVS_STATS_ATTR_INBYTES489,13852
	IPVS_STATS_ATTR_OUTBYTES,	/* outgoing bytes */IPVS_STATS_ATTR_OUTBYTES490,13899
	IPVS_STATS_ATTR_CPS,		/* current connection rate */IPVS_STATS_ATTR_CPS492,13948
	IPVS_STATS_ATTR_INPPS,		/* current in packet rate */IPVS_STATS_ATTR_INPPS493,14001
	IPVS_STATS_ATTR_OUTPPS,		/* current out packet rate */IPVS_STATS_ATTR_OUTPPS494,14055
	IPVS_STATS_ATTR_INBPS,		/* current in byte rate */IPVS_STATS_ATTR_INBPS495,14111
	IPVS_STATS_ATTR_OUTBPS,		/* current out byte rate */IPVS_STATS_ATTR_OUTBPS496,14163
	__IPVS_STATS_ATTR_MAX,__IPVS_STATS_ATTR_MAX497,14217
#define IPVS_STATS_ATTR_MAX IPVS_STATS_ATTR_MAX500,14245
	IPVS_INFO_ATTR_UNSPEC = 0,IPVS_INFO_ATTR_UNSPEC504,14372
	IPVS_INFO_ATTR_VERSION,		/* IPVS version number */IPVS_INFO_ATTR_VERSION505,14400
	IPVS_INFO_ATTR_CONN_TAB_SIZE,	/* size of connection hash table */IPVS_INFO_ATTR_CONN_TAB_SIZE506,14452
	__IPVS_INFO_ATTR_MAX,__IPVS_INFO_ATTR_MAX507,14519
#define IPVS_INFO_ATTR_MAX IPVS_INFO_ATTR_MAX510,14546

libipvs/ip_vs_nl_policy.c,535
struct nla_policy ipvs_cmd_policy[IPVS_CMD_ATTR_MAX + 1] = {ipvs_cmd_policy5,69
struct nla_policy ipvs_service_policy[IPVS_SVC_ATTR_MAX + 1] = {ipvs_service_policy14,446
struct nla_policy ipvs_dest_policy[IPVS_DEST_ATTR_MAX + 1] = {ipvs_dest_policy31,1184
struct nla_policy ipvs_stats_policy[IPVS_STATS_ATTR_MAX + 1] = {ipvs_stats_policy45,1806
struct nla_policy ipvs_info_policy[IPVS_INFO_ATTR_MAX + 1] = {ipvs_info_policy58,2367
struct nla_policy ipvs_daemon_policy[IPVS_DAEMON_ATTR_MAX + 1] = {ipvs_daemon_policy63,2538

libipvs/libipvs.c,3463
typedef struct ipvs_servicedest_s {ipvs_servicedest_s25,711
	struct ip_vs_service_kern	svc;svc26,747
	struct ip_vs_dest_kern		dest;dest27,779
} ipvs_servicedest_t;ipvs_servicedest_t28,810
static int sockfd = -1;sockfd30,833
static void* ipvs_func = NULL;ipvs_func31,857
struct ip_vs_getinfo ipvs_info;ipvs_info32,888
struct nl_handle *sock = NULL;sock35,943
int family, try_nl = 1;family36,974
int family, try_nl = 1;try_nl36,974
#define CHECK_IPV4(CHECK_IPV439,1006
struct nl_msg *ipvs_nl_message(int cmd, int flags) {ipvs_nl_message44,1165
static int ipvs_nl_noop_cb(struct nl_msg *msg, void *arg) {ipvs_nl_noop_cb57,1399
int ipvs_nl_send_message(struct nl_msg *msg, nl_recvmsg_msg_cb_t func, void *arg) {ipvs_nl_send_message61,1477
int ipvs_init(void)ipvs_init108,2302
static int ipvs_getinfo_parse_cb(struct nl_msg *msg, void *arg)ipvs_getinfo_parse_cb134,2733
int ipvs_getinfo(void)ipvs_getinfo153,3239
unsigned int ipvs_version(void)ipvs_version175,3645
int ipvs_flush(void)ipvs_flush181,3710
static int ipvs_nl_fill_service_attr(struct nl_msg *msg, ipvs_service_t *svc) {ipvs_nl_fill_service_attr196,4030
int ipvs_add_service(ipvs_service_t *svc)ipvs_add_service228,4941
int ipvs_update_service(ipvs_service_t *svc)ipvs_update_service249,5431
int ipvs_del_service(ipvs_service_t *svc)ipvs_del_service269,5927
int ipvs_zero_service(ipvs_service_t *svc)ipvs_zero_service289,6416
static int ipvs_nl_fill_dest_attr(struct nl_msg *msg, ipvs_dest_t *dst) {ipvs_nl_fill_dest_attr314,7042
int ipvs_add_dest(ipvs_service_t *svc, ipvs_dest_t *dest)ipvs_add_dest336,7693
int ipvs_update_dest(ipvs_service_t *svc, ipvs_dest_t *dest)ipvs_update_dest366,8439
int ipvs_del_dest(ipvs_service_t *svc, ipvs_dest_t *dest)ipvs_del_dest395,9191
int ipvs_set_timeout(ipvs_timeout_t *to)ipvs_set_timeout425,9937
int ipvs_start_daemon(ipvs_daemon_t *dm)ipvs_start_daemon447,10551
int ipvs_stop_daemon(ipvs_daemon_t *dm)ipvs_stop_daemon478,11312
static int ipvs_parse_stats(struct ip_vs_stats_user *stats, struct nlattr *nla) {ipvs_parse_stats509,12091
static int ipvs_services_parse_cb(struct nl_msg *msg, void *arg)ipvs_services_parse_cb542,13345
struct ip_vs_get_services *ipvs_get_services(void)ipvs_get_services610,15633
typedef int (*qsort_cmp_t)(const void *, const void *);qsort_cmp_t664,16956
ipvs_cmp_services(ipvs_service_entry_t *s1, ipvs_service_entry_t *s2)ipvs_cmp_services667,17017
ipvs_sort_services(struct ip_vs_get_services *s, ipvs_service_cmp_t f)ipvs_sort_services696,17531
static int ipvs_dests_parse_cb(struct nl_msg *msg, void *arg)ipvs_dests_parse_cb703,17722
struct ip_vs_get_dests *ipvs_get_dests(ipvs_service_entry_t *svc)ipvs_get_dests760,19866
int ipvs_cmp_dests(ipvs_dest_entry_t *d1, ipvs_dest_entry_t *d2)ipvs_cmp_dests855,22063
void ipvs_sort_dests(struct ip_vs_get_dests *d, ipvs_dest_cmp_t f)ipvs_sort_dests872,22414
ipvs_get_service(__u32 fwmark, __u16 af, __u16 protocol, union nf_inet_addr addr, __u16 port)ipvs_get_service880,22597
static int ipvs_timeout_parse_cb(struct nl_msg *msg, void *arg)ipvs_timeout_parse_cb945,23987
ipvs_timeout_t *ipvs_get_timeout(void)ipvs_get_timeout965,24629
static int ipvs_daemon_parse_cb(struct nl_msg *msg, void *arg)ipvs_daemon_parse_cb996,25210
ipvs_daemon_t *ipvs_get_daemon(void)ipvs_get_daemon1030,26227
void ipvs_close(void)ipvs_close1062,26869
const char *ipvs_strerror(int err)ipvs_strerror1073,26970

libipvs/Makefile,301
CC		= gccCC3,24
CFLAGS		= -Wall -Wunused -Wstrict-prototypes -g -fPICCFLAGS4,34
DEFINES		= $(shell if [ ! -f ../../ip_vs.h ]; then	\DEFINES11,226
.PHONY		= all clean install dist distclean rpm rpms.PHONY14,318
STATIC_LIB	= libipvs.aSTATIC_LIB15,370
SHARED_LIB	= libipvs.soSHARED_LIB16,393

libipvs/libipvs.h,968
#define _LIBIPVS_H_LIBIPVS_H11,209
#define MINIMUM_IPVS_VERSION_MAJOR MINIMUM_IPVS_VERSION_MAJOR16,250
#define MINIMUM_IPVS_VERSION_MINOR MINIMUM_IPVS_VERSION_MINOR17,292
#define MINIMUM_IPVS_VERSION_PATCH MINIMUM_IPVS_VERSION_PATCH18,334
#define IPVS_VERSION(IPVS_VERSION21,398
#define IPVS_SVC_PERSISTENT_TIMEOUT	IPVS_SVC_PERSISTENT_TIMEOUT34,984
typedef struct ip_vs_service_user	ipvs_service_t;ipvs_service_t37,1029
typedef struct ip_vs_dest_user		ipvs_dest_t;ipvs_dest_t38,1079
typedef struct ip_vs_timeout_user	ipvs_timeout_t;ipvs_timeout_t39,1124
typedef struct ip_vs_daemon_user	ipvs_daemon_t;ipvs_daemon_t40,1174
typedef struct ip_vs_service_entry	ipvs_service_entry_t;ipvs_service_entry_t41,1222
typedef struct ip_vs_dest_entry		ipvs_dest_entry_t;ipvs_dest_entry_t42,1279
typedef int (*ipvs_service_cmp_t)(ipvs_service_entry_t *,ipvs_service_cmp_t95,2779
typedef int (*ipvs_dest_cmp_t)(ipvs_dest_entry_t *,ipvs_dest_cmp_t106,3220

ipvsadm.c,5960
#undef __KERNEL__	__KERNEL__93,4783
#define IPVS_OPTION_PROCESSING	IPVS_OPTION_PROCESSING116,5290
#define IPVSADM_VERSION_NO	IPVSADM_VERSION_NO121,5386
#define IPVSADM_VERSION_DATE	IPVSADM_VERSION_DATE122,5425
#define IPVSADM_VERSION	IPVSADM_VERSION123,5466
#define MAX_TIMEOUT	MAX_TIMEOUT125,5536
#define CMD_NONE	CMD_NONE127,5583
#define CMD_ADD	CMD_ADD128,5603
#define CMD_EDIT	CMD_EDIT129,5634
#define CMD_DEL	CMD_DEL130,5665
#define CMD_FLUSH	CMD_FLUSH131,5696
#define CMD_LIST	CMD_LIST132,5728
#define CMD_ADDDEST	CMD_ADDDEST133,5759
#define CMD_DELDEST	CMD_DELDEST134,5793
#define CMD_EDITDEST	CMD_EDITDEST135,5827
#define CMD_TIMEOUT	CMD_TIMEOUT136,5862
#define CMD_STARTDAEMON	CMD_STARTDAEMON137,5896
#define CMD_STOPDAEMON	CMD_STOPDAEMON138,5935
#define CMD_RESTORE	CMD_RESTORE139,5973
#define CMD_SAVE	CMD_SAVE140,6008
#define CMD_ZERO	CMD_ZERO141,6040
#define CMD_MAX	CMD_MAX142,6072
#define NUMBER_OF_CMD	NUMBER_OF_CMD143,6099
static const char* cmdnames[] = {cmdnames145,6144
#define OPT_NONE	OPT_NONE162,6373
#define OPT_NUMERIC	OPT_NUMERIC163,6400
#define OPT_CONNECTION	OPT_CONNECTION164,6430
#define OPT_SERVICE	OPT_SERVICE165,6463
#define OPT_SCHEDULER	OPT_SCHEDULER166,6493
#define OPT_PERSISTENT	OPT_PERSISTENT167,6525
#define OPT_NETMASK	OPT_NETMASK168,6558
#define OPT_SERVER	OPT_SERVER169,6588
#define OPT_FORWARD	OPT_FORWARD170,6617
#define OPT_WEIGHT	OPT_WEIGHT171,6647
#define OPT_UTHRESHOLD	OPT_UTHRESHOLD172,6676
#define OPT_LTHRESHOLD	OPT_LTHRESHOLD173,6709
#define OPT_MCAST	OPT_MCAST174,6742
#define OPT_TIMEOUT	OPT_TIMEOUT175,6770
#define OPT_DAEMON	OPT_DAEMON176,6800
#define OPT_STATS	OPT_STATS177,6829
#define OPT_RATE	OPT_RATE178,6857
#define OPT_THRESHOLDS	OPT_THRESHOLDS179,6884
#define OPT_PERSISTENTCONN	OPT_PERSISTENTCONN180,6917
#define OPT_NOSORT	OPT_NOSORT181,6953
#define OPT_SYNCID	OPT_SYNCID182,6982
#define OPT_EXACT	OPT_EXACT183,7011
#define NUMBER_OF_OPT	NUMBER_OF_OPT184,7039
static const char* optnames[] = {optnames186,7066
static const char commands_v_options[NUMBER_OF_CMD][NUMBER_OF_OPT] =commands_v_options218,7585
#define FMT_NONE	FMT_NONE238,9467
#define FMT_NUMERIC	FMT_NUMERIC239,9492
#define FMT_RULE	FMT_RULE240,9520
#define FMT_STATS	FMT_STATS241,9545
#define FMT_RATE	FMT_RATE242,9571
#define FMT_THRESHOLDS	FMT_THRESHOLDS243,9596
#define FMT_PERSISTENTCONN	FMT_PERSISTENTCONN244,9627
#define FMT_NOSORT	FMT_NOSORT245,9661
#define FMT_EXACT	FMT_EXACT246,9688
#define SERVICE_NONE	SERVICE_NONE248,9715
#define SERVICE_ADDR	SERVICE_ADDR249,9744
#define SERVICE_PORT	SERVICE_PORT250,9773
#define DEF_SCHED	DEF_SCHED253,9827
#define DEF_MCAST_IFN	DEF_MCAST_IFN256,9892
#define CONN_PROC_FILE	CONN_PROC_FILE258,9923
struct ipvs_command_entry {ipvs_command_entry260,9971
	int			cmd;cmd261,9999
	ipvs_service_t		svc;svc262,10011
	ipvs_dest_t		dest;dest263,10033
	ipvs_timeout_t		timeout;timeout264,10053
	ipvs_daemon_t		daemon;daemon265,10079
int main(int argc, char **argv)main308,11892
parse_options(int argc, char **argv, struct ipvs_command_entry *ce,parse_options340,12551
static int restore_table(int argc, char **argv, int reading_stdin)restore_table655,21385
static int process_options(int argc, char **argv, int reading_stdin)process_options675,21849
static int string_to_number(const char *s, int min, int max)string_to_number803,24941
static int parse_timeout(char *buf, int min, int max)parse_timeout822,25291
static unsigned int parse_fwmark(char *buf)parse_fwmark840,25638
static int parse_netmask(char *buf, u_int32_t *addr)parse_netmask860,25975
parse_service(char *buf, ipvs_service_t *svc)parse_service886,26446
generic_opt_check(int command, int options)generic_opt_check945,27630
opt2name(int option)opt2name979,28478
set_command(int *cmd, const int newcmd)set_command988,28606
set_option(unsigned int *options, unsigned int option)set_option996,28744
static void tryhelp_exit(const char *program, const int exit_status)tryhelp_exit1004,28914
static void usage_exit(const char *program, const int exit_status)usage_exit1012,29101
static void version_exit(const int exit_status)version_exit1097,33185
static void version(FILE *stream)version1112,33362
static void fail(int err, char *msg, ...)fail1121,33551
static int modprobe_ipvs(void)modprobe_ipvs1133,33718
static void check_ipvs_version(void)check_ipvs_version1155,34026
static void print_conn(char *buf, unsigned int format)print_conn1175,34563
void list_conn(unsigned int format)list_conn1240,36350
static inline char *fwd_name(unsigned flags)fwd_name1273,37048
static inline char *fwd_switch(unsigned flags)fwd_switch1294,37389
static void print_largenum(unsigned long long i, unsigned int format)print_largenum1311,37692
static void print_title(unsigned int format)print_title1335,38325
print_service_entry(ipvs_service_entry_t *se, unsigned int format)print_service_entry1364,39385
static void list_service(ipvs_service_t *svc, unsigned int format)list_service1506,43564
static void list_all(unsigned int format)list_all1522,43911
void list_timeout(void)list_timeout1546,44447
static void list_daemon(void)list_daemon1558,44660
int host_to_addr(const char *name, struct in_addr *addr)host_to_addr1575,45033
static char * addr_to_host(int af, const void *addr)addr_to_host1591,45405
static char * addr_to_anyname(int af, const void *addr)addr_to_anyname1603,45636
int service_to_port(const char *name, unsigned short proto)service_to_port1615,45862
static char * port_to_service(unsigned short port, unsigned short proto)port_to_service1630,46241
static char * port_to_anyname(unsigned short port, unsigned short proto)port_to_anyname1645,46610
addrport_to_anyname(int af, const void *addr, unsigned short port,addrport_to_anyname1660,46859
static int str_is_digit(const char *str)str_is_digit1686,47428

config_stream.c,88
config_stream_read(FILE * stream, const char *first_element)config_stream_read31,1091

dynamic_array.c,648
dynamic_array_create(size_t block_size)dynamic_array_create29,1009
dynamic_array_destroy(dynamic_array_t * a,dynamic_array_destroy61,1964
dynamic_array_add_element(dynamic_array_t * a,dynamic_array_add_element96,3301
dynamic_array_display(dynamic_array_t * a,dynamic_array_display141,4814
dynamic_array_get_element(dynamic_array_t * a, size_t elementno)dynamic_array_get_element194,6249
dynamic_array_get_count(dynamic_array_t * a)dynamic_array_get_count211,6747
dynamic_array_get_vector(dynamic_array_t * a)dynamic_array_get_vector228,7165
dynamic_array_split_str(char *string, const char delimiter)dynamic_array_split_str249,7777

config_stream.h,101
#define CONFIG_STREAM_FLIMCONFIG_STREAM_FLIM11,238
#define MAX_LINE_LENGTH MAX_LINE_LENGTH15,294

dynamic_array.h,471
#define DYNAMIC_ARRAY_FLIMDYNAMIC_ARRAY_FLIM15,487
#define DEFAULT_DYNAMIC_ARRAY_BLOCK_SIZE DEFAULT_DYNAMIC_ARRAY_BLOCK_SIZE27,687
#define DESTROY_STR DESTROY_STR31,788
#define DUP_STR DUP_STR32,832
#define DISPLAY_STR DISPLAY_STR33,881
#define LEN_STR LEN_STR34,936
  void **vector;vector38,999
  size_t count;count39,1016
  size_t allocated_size;allocated_size40,1032
  size_t block_size;block_size41,1057
} dynamic_array_t;dynamic_array_t42,1078

ipvsadm.sh,106
  function action {action35,817
  function success {success40,872
  function failure {failure43,919

Makefile,1432
NAME		= ipvsadmNAME28,1081
VERSION		= $(shell cat VERSION)VERSION29,1097
RELEASE		= 1RELEASE30,1129
SCHEDULERS	= "$(shell cat SCHEDULERS)"SCHEDULERS31,1142
PROGROOT	= $(shell basename `pwd`)PROGROOT32,1181
ARCH		= $(shell uname -m)ARCH33,1216
RPMSOURCEDIR	= $(shell rpm --eval '%_sourcedir')RPMSOURCEDIR34,1242
RPMSPECDIR	= $(shell rpm --eval '%_specdir')RPMSPECDIR35,1291
KERNELDIR	= /lib/modules/$(shell uname -r)/buildKERNELDIR36,1336
CC		= gccCC38,1386
INCLUDE		= -I.INCLUDE39,1396
SBIN		= $(BUILD_ROOT)/sbinSBIN40,1411
MANDIR		= usr/manMANDIR41,1438
MAN		= $(BUILD_ROOT)/$(MANDIR)/man8MAN42,1456
INIT		= $(BUILD_ROOT)/etc/rc.d/init.dINIT43,1492
MKDIR		= mkdirMKDIR44,1530
INSTALL		= installINSTALL45,1545
STATIC_LIBS	= libipvs/libipvs.aSTATIC_LIBS46,1564
    CFLAGS = -Wall -Wunused -Wstrict-prototypes -g -m64 -pipe -mcpu=ultrasparc -mcmodel=medlowCFLAGS49,1622
    CFLAGS = -Wall -Wunused -Wstrict-prototypes -gCFLAGS51,1722
RPMBUILD = $(shell				\RPMBUILD58,1858
LIB_SEARCH = /lib /usr/lib /usr/local/libLIB_SEARCH66,2014
POPT_LIB = $(shell for i in $(LIB_SEARCH); do \POPT_LIB67,2056
POPT_DEFINE = -DHAVE_POPTPOPT_DEFINE77,2266
OBJS		= ipvsadm.o config_stream.o dynamic_array.oOBJS80,2299
LIBS		= $(POPT_LIB)LIBS81,2349
DEFINES		= -DVERSION=\"$(VERSION)\" -DSCHEDULERS=\"$(SCHEDULERS)\" \DEFINES85,2410
.PHONY	= all clean install dist distclean rpm rpms.PHONY91,2590
